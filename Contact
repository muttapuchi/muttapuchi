
#include <iostream>
#include <vector>
#include <algorithm>
#include <iomanip>

using namespace std;

class Contact {
public:
    string name;
    string phone_number;
    string email;

    Contact(string name, string phone_number, string email) {
        this->name = name;
        this->phone_number = phone_number;
        this->email = email;
    }
};

class ContactManager {
private:
    vector<Contact> contacts;

public:
    void add_contact(Contact contact) {
        contacts.push_back(contact);
        cout << "Contact '" << contact.name << "' added successfully." << endl;
    }

    void view_contacts() {
        if (!contacts.empty()) {
            cout << "Contacts:" << endl;
            int index = 1;
            for (const Contact &contact : contacts) {
                cout << index << ". Name: " << contact.name << ", Phone: " << contact.phone_number << ", Email: " << contact.email << endl;
                index++;
            }
        } else {
            cout << "No contacts found." << endl;
        }
    }

    void search_contact(string name) {
        vector<Contact> found_contacts;
        transform(name.begin(), name.end(), name.begin(), ::tolower);
        for (const Contact &contact : contacts) {
            string lower_name = contact.name;
            transform(lower_name.begin(), lower_name.end(), lower_name.begin(), ::tolower);
            if (lower_name == name) {
                found_contacts.push_back(contact);
            }
        }
        if (!found_contacts.empty()) {
            cout << "Found " << found_contacts.size() << " contact(s) with the name '" << name << "':" << endl;
            for (const Contact &contact : found_contacts) {
                cout << "Name: " << contact.name << ", Phone: " << contact.phone_number << ", Email: " << contact.email << endl;
            }
        } else {
            cout << "No contacts found with the name '" << name << "'." << endl;
        }
    }

    void delete_contact(string name) {
        auto it = find_if(contacts.begin(), contacts.end(), [name](const Contact &contact) {
            return contact.name == name;
        });
        if (it != contacts.end()) {
            contacts.erase(it);
            cout << "Contact '" << name << "' deleted successfully." << endl;
        } else {
            cout << "No contact found with the name '" << name << "'." << endl;
        }
    }
};

int main() {
    ContactManager contact_manager;

    while (true) {
        cout << "\nContact Management System" << endl;
        cout << "1. Add Contact" << endl;
        cout << "2. View Contacts" << endl;
        cout << "3. Search Contact" << endl;
        cout << "4. Delete Contact" << endl;
        cout << "5. Exit" << endl;

        string choice;
        cout << "Enter your choice: ";
        cin >> choice;

        if (choice == "1") {
            string name, phone_number, email;
            cout << "Enter name: ";
            cin.ignore();
            getline(cin, name);
            cout << "Enter phone number: ";
            getline(cin, phone_number);
            cout << "Enter email: ";
            getline(cin, email);
            Contact contact(name, phone_number, email);
            contact_manager.add_contact(contact);
        } else if (choice == "2") {
            contact_manager.view_contacts();
        } else if (choice == "3") {
            string name;
            cout << "Enter name to search: ";
            cin.ignore();
            getline(cin, name);
            contact_manager.search_contact(name);
        } else if (choice == "4") {
            string name;
            cout << "Enter name to delete: ";
            cin.ignore();
            getline(cin, name);
            contact_manager.delete_contact(name);
        } else if (choice == "5") {
            cout << "Exiting program." << endl;
            break;
        } else {
            cout << "Invalid choice. Please try again." << endl;
        }
    }

    return 0;
}
